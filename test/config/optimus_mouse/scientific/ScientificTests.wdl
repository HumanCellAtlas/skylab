task TestBam {

  # TODO move to meta block
  # Description: Compare the tagged/aligned bam generated by Optimus to expected values derived from running Cell
  # Ranger on the same data

  File bam

  Int expected_records = 3055752
  Int chr1_expected = 1170508
  Int chr2_expected = 134053
  Int unmapped_expected = 134321

  Int required_disk = ceil(size(bam, "G") * 1.2)

  parameter_meta {
    bam: "The aligned and tagged bamfile from the Optimus workflow, run on synthetic data"
    expected_records: "Total number of records in bam"
    chr1_expected: "Total number of expected alignments for chromosome 1"
    chr2_expected: "Total number of expected alignments for chromosome 2"
    unmapped_expected: "Total number of unmapped alignments"
  }

  command {

    # catch uncommon errors
    set -eo pipefail

    # we don't have an index, so generate one here
    samtools index "${bam}"

    N_RECORDS=$(samtools view "${bam}" | wc -l)
    if [ $N_RECORDS != "${expected_records}" ]; then
        >&2 echo "Number of records in the pipeline output ($N_RECORDS) did not match the expected number (${expected_records})"
        exit 1
    fi

    python3 <<CODE

    import pysam
    import sys

    bamfile = '${bam}'
    bam = pysam.AlignmentFile(bamfile)

    chr1_records = sum(1 for _ in bam.fetch(contig='1'))
    chr2_records = sum(1 for _ in bam.fetch(contig='2'))
    unmapped_records = sum(1 for record in bam if record.is_unmapped)

    triggered_errors = False

    chr1_expected = ${chr1_expected}
    if chr1_records != chr1_expected:
        sys.stderr.write('chr1 observed records %d != expected records %d' % (chr1_records, chr1_expected))
        triggered_errors = True

    chr2_expected = ${chr2_expected}
    if chr2_records != chr2_expected:
        sys.stderr.write('chr2 observed records %d != expected records %d' % (chr2_records, chr2_expected))
        triggered_errors = True

    unmapped_expected = ${unmapped_expected}
    if unmapped_records != unmapped_expected:
        sys.stderr.write('unmapped observed records %d != expected records %d' % (unmapped_records, unmapped_expected))
        triggered_errors = True

    if triggered_errors:
        sys.exit(1)

    CODE
  }

  runtime {
    docker: "quay.io/humancellatlas/secondary-analysis-python3-scientific:0.0.1"
    cpu: 1
    memory: "3.75 GB"
    disks: "local-disk ${required_disk} HDD"
  }
}