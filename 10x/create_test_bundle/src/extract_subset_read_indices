#!/usr/local/bin/python3

import sys
import os
import json
import pysam

script_name = os.path.split(__file__)[-1]


def main(bam_file, retained_indices_file, chromosome=19, n_unaligned=2000, n_aligned=10000):
    """Extract reads from bam_file to create testing file

    Extract indices of first n_aligned and n_unaligned reads from bam_file and write
    indices to output_file in the same order. Note that there should be no intermediate sorting
    of the bam_file or the index map will not correspond to the original input files.

    Note that n_unaligned and n_aligned are not currently used by command
    line, but are present in case future adaptation is desired

    :param str bam_file: input bamfile
    :param str retained_indices_file: output json file containing indices of reads that will be
      extracted from original input files
    :param int chromosome: [default 19] chromsome to extract aligned reads from
    :param int n_unaligned: [default 2000] number of unaligned reads to include
    :param int n_aligned: [default 10000] number of aligned reads to include
    """

    # todo could make this reference a particular chromsome, but would
    # be much more complicated to script, and this method is unlikely to
    # very time limiting

    with pysam.AlignmentFile(bam_file, 'rb') as fin:

        aligned, unaligned = 0, 0  # counters
        chrom_string = str(chromosome)
        indices = []

        for i, record in enumerate(fin):

            # should be a check that works with all annotation types
            if record.is_unmapped and unaligned < n_unaligned:
                indices.append(i)
                unaligned += 1
            elif not record.is_unmapped and chrom_string in record.rname and aligned < n_aligned:
                indices.append(i)
                aligned += 1

            # check termination condition (we have the requisite number of reads
            if aligned == n_aligned and unaligned == n_unaligned:
                break

    # write indices
    with open(retained_indices_file, 'w') as fout:
        json.dump(indices, fout)

    # warn user if early termination occurred
    if aligned < n_aligned or unaligned < n_unaligned:
        print('Warning: %s: test file construction terminated early. Only %d unaligned '
              'and %d aligned reads were written to %s' %
              (script_name, n_unaligned, n_aligned, retained_indices_file))


if __name__ == "__main__":
    if not len(sys.argv) == 4:
        print('Error: %s: Correct usage: %s bam_file indices_json_filename chromosome_number' %
              (script_name, script_name))
        sys.exit(2)
    main(*sys.argv[1:])
